import{_ as b}from"./ValaxyMain.vue_vue_type_script_setup_true_lang.BA-p-aN3.js";import{_ as k}from"./ValaxyMermaid.vue_vue_type_script_setup_true_lang.XXuGil93.js";import"./chunks/pinia.C8xpNjyg.js";import{d as h,u as c,a as y}from"./chunks/vue-router._bgINN5_.js";import{a1 as f,a2 as v,a8 as t,V as B,a7 as e,a6 as l,a4 as x,T as I,a9 as n,aa as P,Z as C}from"./framework.DIhz9aLV.js";import"./app.C9BwLGJy.js";import"./chunks/dayjs.BsdSHi3w.js";import"./chunks/vue-i18n.BQpbHoSW.js";/* empty css                    */import"./chunks/nprogress.Cm54BOVh.js";import"./router.-rV2tM5K.js";const $=h("/posts/B树",async i=>JSON.parse('{"title":"B树","description":"","frontmatter":{"layout":"post","title":"B树","date":"2025-09-05 22:30:00","categories":"算法","tags":["算法","树","B树","数据结构","数据库"],"cover":"https://pic.akorin.icu/20250905223311409.webp","codeHeightLimit":500,"toc":true,"time_warning":true,"end":true,"updated":"2025-09-05 22:30:00"},"headers":[],"relativePath":"pages/posts/B树.md","lastUpdated":1757605243000}'),{lazy:(i,u)=>i.name===u.name}),G={__name:"B树",setup(i,{expose:u}){const{data:r}=$(),p=y(),d=c(),o=Object.assign(d.meta.frontmatter||{},r.value?.frontmatter||{});return p.currentRoute.value.data=r.value,C("valaxy:frontmatter",o),globalThis.$frontmatter=o,u({frontmatter:{layout:"post",title:"B树",date:"2025-09-05 22:30:00",categories:"算法",tags:["算法","树","B树","数据结构","数据库"],cover:"https://pic.akorin.icu/20250905223311409.webp",codeHeightLimit:500,toc:!0,time_warning:!0,end:!0,updated:"2025-09-05 22:30:00"}}),(a,s)=>{const m=k,g=b;return v(),f(g,{frontmatter:B(o)},{"main-content-md":t(()=>[s[0]||(s[0]=l("h1",{id:"b树-b-tree",tabindex:"-1"},[n("B树 (B-Tree) "),l("a",{class:"header-anchor",href:"#b树-b-tree","aria-label":'Permalink to "B树 (B-Tree)"'},"​")],-1)),s[1]||(s[1]=l("p",null,[n("B 树（Balance Tree / 多路平衡查找树）是一种"),l("strong",null,"多路自平衡搜索树"),n("，广泛应用于数据库与文件系统的索引结构。它通过"),l("strong",null,"把大量有序关键字集中在节点中并尽量减少树高度"),n("，在磁盘 / SSD 的块（page）为单位读取场景下显著降低 I/O 次数。")],-1)),s[2]||(s[2]=l("p",null,"核心目标：在保持有序字典操作 O(log n) 的同时，把树的高度压低，使得一次查询只需极少磁盘访问。",-1)),x(" more "),s[3]||(s[3]=l("h2",{id:"基本定义与参数",tabindex:"-1"},[n("基本定义与参数 "),l("a",{class:"header-anchor",href:"#基本定义与参数","aria-label":'Permalink to "基本定义与参数"'},"​")],-1)),s[4]||(s[4]=l("p",null,"引入两个常见参数：",-1)),s[5]||(s[5]=l("ul",null,[l("li",null,[n("阶 (order) 记为 "),l("code",null,"m"),n("：一个节点"),l("strong",null,"最多"),n("可以拥有的孩子指针数（即最多 m 个子树）。")]),l("li",null,[n("最小度数 (minimum degree) 记为 "),l("code",null,"t"),n("：常见教材用 "),l("code",null,"t"),n("，与阶的关系："),l("code",null,"m = 2t"),n(" 或 "),l("code",null,"m = 2t - 1"),n(" 取决于不同实现约定。本文采用 "),l("strong",null,"CLRS 定义"),n("： "),l("ul",null,[l("li",null,[n("每个非根节点至少有 "),l("code",null,"t - 1"),n(" 个键，至多 "),l("code",null,"2t - 1"),n(" 个键。")]),l("li",null,"每个非根节点孩子数 ∈ [t, 2t]。"),l("li",null,[n("根节点特殊：可以少于 "),l("code",null,"t - 1"),n("（当根非叶时，至少 1 个键；当全树只有一个节点它可为空）。")])])])],-1)),s[6]||(s[6]=l("p",null,"记：",-1)),s[7]||(s[7]=l("ul",null,[l("li",null,[n("关键字数量范围："),l("code",null,"ceil(m/2) - 1 <= keys(node) <= m - 1"),n("（根除外）")]),l("li",null,[n("孩子指针数："),l("code",null,"keys + 1")]),l("li",null,[n("节点被填满（满节点 / full node）："),l("code",null,"keys == m - 1")])],-1)),s[8]||(s[8]=l("blockquote",null,[l("p",null,"ceil 表示向上取整。")],-1)),s[9]||(s[9]=l("h3",{id:"节点结构-逻辑",tabindex:"-1"},[n("节点结构（逻辑） "),l("a",{class:"header-anchor",href:"#节点结构-逻辑","aria-label":'Permalink to "节点结构（逻辑）"'},"​")],-1)),s[10]||(s[10]=l("div",{class:"language-text max-h-500px"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"},"text"),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"节点:")]),n(`
`),l("span",{class:"line"},[l("span",null,"  keys[ k1  k2  ...  kk ]  (升序)")]),n(`
`),l("span",{class:"line"},[l("span",null,"  children[ c0 c1 ... ck ]  (k = keys.length)")]),n(`
`),l("span",{class:"line"},[l("span",null,"    所有关键字满足:  c0 < k1 < c1 < k2 < c2 < ... < kk < ck")]),n(`
`),l("span",{class:"line"},[l("span",null,"  leaf 标志: 是否叶子")])])]),l("button",{class:"code-block-unfold-btn"})],-1)),s[11]||(s[11]=l("h3",{id:"有序性不变量",tabindex:"-1"},[n("有序性不变量 "),l("a",{class:"header-anchor",href:"#有序性不变量","aria-label":'Permalink to "有序性不变量"'},"​")],-1)),s[12]||(s[12]=l("p",null,"对任一节点：",-1)),s[13]||(s[13]=l("div",{class:"language- max-h-500px"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"keys 升序")]),n(`
`),l("span",{class:"line"},[l("span",null,"child i 子树的所有键 ∈ (key_{i}, key_{i+1}) 的开区间（边界视为 -∞/+∞）")])])]),l("button",{class:"code-block-unfold-btn"})],-1)),s[14]||(s[14]=l("h2",{id:"查找-search",tabindex:"-1"},[n("查找 (Search) "),l("a",{class:"header-anchor",href:"#查找-search","aria-label":'Permalink to "查找 (Search)"'},"​")],-1)),s[15]||(s[15]=l("p",null,[n("类似多叉二分：在当前节点内先对 keys 做顺序/二分查找找到区间，再沿对应孩子下降。由于节点内的 "),l("code",null,"keys"),n(" 数量 ≤ "),l("code",null,"2t - 1"),n("，常用 "),l("strong",null,"顺序查找 + 分支预测 + SIMD"),n(" 在内存/页内已经足够快；也可以二分。")],-1)),s[16]||(s[16]=l("p",null,[n("时间复杂度："),l("code",null,"O(h)"),n(" = "),l("code",null,"O(log_t n)"),n("，磁盘 I/O ≈ 高度 "),l("code",null,"h"),n("。")],-1)),s[17]||(s[17]=l("h2",{id:"高度估计",tabindex:"-1"},[n("高度估计 "),l("a",{class:"header-anchor",href:"#高度估计","aria-label":'Permalink to "高度估计"'},"​")],-1)),s[18]||(s[18]=l("p",null,"最“胖”结构可把 n 关键字压到极低高度。由最小填充情况求上界：",-1)),s[19]||(s[19]=l("ul",null,[l("li",null,[n("除根外每个节点至少有 "),l("code",null,"t - 1"),n(" 个键；根至少 1 个键（非空）。")]),l("li",null,[n("高度 h（根到叶路径边数）时： "),l("ul",null,[l("li",null,[n("最少关键字数："),l("code",null,"n_min(h) = 1 + (t) * (t) * ... * (t) * (t - 1)"),n("（精确推导更规范如下）")])])])],-1)),s[20]||(s[20]=l("p",null,[n("更标准推导：高度 h 的最少关键字数 >= "),l("code",null,"2 * t^{h} - 1"),n(" （根最少 1，下一层起每个节点至少 t 个孩子）。")],-1)),s[21]||(s[21]=l("p",null,"反向解高度：",-1)),s[22]||(s[22]=l("p",null,[l("span",{class:"katex-display"},[l("span",{class:"katex"},[l("span",{class:"katex-mathml"},[l("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[l("semantics",null,[l("mrow",null,[l("mi",null,"h"),l("mo",null,"≤"),l("msub",null,[l("mrow",null,[l("mi",null,"log"),l("mo",null,"⁡")]),l("mi",null,"t")]),l("mfrac",null,[l("mrow",null,[l("mi",null,"n"),l("mo",null,"+"),l("mn",null,"1")]),l("mn",null,"2")])]),l("annotation",{encoding:"application/x-tex"},"h \\le \\log_t \\frac{n+1}{2} ")])])]),l("span",{class:"katex-html","aria-hidden":"true"},[l("span",{class:"base"},[l("span",{class:"strut",style:{height:"0.8304em","vertical-align":"-0.136em"}}),l("span",{class:"mord mathnormal"},"h"),l("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),l("span",{class:"mrel"},"≤"),l("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),l("span",{class:"base"},[l("span",{class:"strut",style:{height:"2.0074em","vertical-align":"-0.686em"}}),l("span",{class:"mop"},[l("span",{class:"mop"},[n("lo"),l("span",{style:{"margin-right":"0.01389em"}},"g")]),l("span",{class:"msupsub"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.1864em"}},[l("span",{style:{top:"-2.4559em","margin-right":"0.05em"}},[l("span",{class:"pstrut",style:{height:"2.7em"}}),l("span",{class:"sizing reset-size6 size3 mtight"},[l("span",{class:"mord mathnormal mtight"},"t")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.2441em"}},[l("span")])])])])]),l("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),l("span",{class:"mord"},[l("span",{class:"mopen nulldelimiter"}),l("span",{class:"mfrac"},[l("span",{class:"vlist-t vlist-t2"},[l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"1.3214em"}},[l("span",{style:{top:"-2.314em"}},[l("span",{class:"pstrut",style:{height:"3em"}}),l("span",{class:"mord"},[l("span",{class:"mord"},"2")])]),l("span",{style:{top:"-3.23em"}},[l("span",{class:"pstrut",style:{height:"3em"}}),l("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),l("span",{style:{top:"-3.677em"}},[l("span",{class:"pstrut",style:{height:"3em"}}),l("span",{class:"mord"},[l("span",{class:"mord mathnormal"},"n"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mbin"},"+"),l("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),l("span",{class:"mord"},"1")])])]),l("span",{class:"vlist-s"},"​")]),l("span",{class:"vlist-r"},[l("span",{class:"vlist",style:{height:"0.686em"}},[l("span")])])])]),l("span",{class:"mclose nulldelimiter"})])])])])])],-1)),s[23]||(s[23]=l("p",null,"由于 t 较大（一个页往往能放上百个 key），所以 h 极小（常见 2~4）。",-1)),s[24]||(s[24]=l("h2",{id:"插入-insert",tabindex:"-1"},[n("插入 (Insert) "),l("a",{class:"header-anchor",href:"#插入-insert","aria-label":'Permalink to "插入 (Insert)"'},"​")],-1)),s[25]||(s[25]=l("p",null,[n("核心策略："),l("strong",null,"自顶向下保证不向满节点“继续下探”"),n("，避免回溯复杂度。")],-1)),s[26]||(s[26]=l("p",null,"步骤：",-1)),s[27]||(s[27]=l("ol",null,[l("li",null,[n("若根已满（"),l("code",null,"2t-1"),n(" 键），先分裂根： "),l("ul",null,[l("li",null,[n("创建新节点 "),l("code",null,"R'"),n(" 做新根")]),l("li",null,"旧根分裂为两个节点 + 中间 key 上升"),l("li",null,"树高度 +1")])]),l("li",null,[n("从（可能更新后的）根开始向下： "),l("ul",null,[l("li",null,"对当前节点：找到要下降的 child 索引 i。"),l("li",null,[n("如果 child_i 满，先分裂它： "),l("ul",null,[l("li",null,[n("中间键 "),l("code",null,"mid"),n(" 上升插入当前节点 keys 中")]),l("li",null,[n("child 分裂成两个节点（左含前 "),l("code",null,"t-1"),n(" 键，右含后 "),l("code",null,"t-1"),n(" 键）")]),l("li",null,[n("依据插入的 key 与 "),l("code",null,"mid"),n(" 比较，决定继续走左还是右半部分")])])])])]),l("li",null,"到达叶节点后（必非满），在本地数组中插入目标 key（保持有序）。")],-1)),s[28]||(s[28]=l("p",null,[n("这样“"),l("strong",null,"双向不回溯"),n("”：所有分裂都在下降途中完成。")],-1)),s[29]||(s[29]=l("h3",{id:"分裂示意",tabindex:"-1"},[n("分裂示意 "),l("a",{class:"header-anchor",href:"#分裂示意","aria-label":'Permalink to "分裂示意"'},"​")],-1)),s[30]||(s[30]=l("p",null,"假设 t = 3（节点最多 5 个键，满时 5 = 2t-1）：",-1)),s[31]||(s[31]=l("div",{class:"language- max-h-500px"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"满节点: [ k0  k1  k2  k3  k4 ]   (5 keys)")]),n(`
`),l("span",{class:"line"},[l("span",null,"               ^ mid = k2 上升")]),n(`
`),l("span",{class:"line"},[l("span",null,"左节点: [ k0  k1 ]")]),n(`
`),l("span",{class:"line"},[l("span",null,"右节点: [ k3  k4 ]")]),n(`
`),l("span",{class:"line"},[l("span",null,"父插入 k2，并在 k2 左右挂上分裂出的两个孩子。")])])]),l("button",{class:"code-block-unfold-btn"})],-1)),s[32]||(s[32]=l("p",null,"Mermaid（概念化）：",-1)),I(m,P({code:"Zmxvd2NoYXJ0IFRCCiAgQVvmu6E6IGswIGsxIGsyIGszIGs0XSAtLT58c3BsaXR8IFBb54i26IqC54K5XQogIFAgLS0-IExbazAgazFdCiAgUCAtLT4gTSgoazIg5LiK5Y2HKSkKICBQIC0tPiBSW2szIGs0XQ"},{}),null,16),s[33]||(s[33]=l("h2",{id:"删除-delete",tabindex:"-1"},[n("删除 (Delete) "),l("a",{class:"header-anchor",href:"#删除-delete","aria-label":'Permalink to "删除 (Delete)"'},"​")],-1)),s[34]||(s[34]=l("p",null,[n("删除比插入更繁琐：可能导致节点关键字数量跌破下界 "),l("code",null,"(t-1)"),n("，需要"),l("strong",null,"借 (borrow)"),n(" 或 "),l("strong",null,"合并 (merge)"),n("。同样采用“自顶向下”思想：保证下降到的节点在进入前就至少有 t 个键（从而安全删除其中一个而不至低于 t-1）。")],-1)),s[35]||(s[35]=l("p",null,"主线：",-1)),s[36]||(s[36]=l("ol",null,[l("li",null,"若根空（无键且有孩子），直接让唯一孩子成为新根（高度 -1）。"),l("li",null,[n("从根向下定位 key：对当前节点，确保将要进入的 child 在进入前“够格”。 "),l("ul",null,[l("li",null,[n("如果 child 键数 == t-1： "),l("ul",null,[l("li",null,"若相邻兄弟有 ≥ t 键：从兄弟“借”一个（通过父节点旋转键）。"),l("li",null,"否则：与兄弟 + 父中的分隔键合并成一个节点（键数 = 2t-1）。")])])])]),l("li",null,[n("如果在内部节点命中要删的 key： "),l("ul",null,[l("li",null,"用前驱（左子树最大）或后继（右子树最小）替换，然后递归删除该替换位置的 key。"),l("li",null,"或者：若左右子树之一可安全删除直接选路径（实现者策略差异）。")])]),l("li",null,"若在叶子命中：直接删除（此时必满足叶节点 ≥ t 键或下降前已调整）。")],-1)),s[37]||(s[37]=l("h3",{id:"借与合并图解-t-3",tabindex:"-1"},[n("借与合并图解 (t = 3) "),l("a",{class:"header-anchor",href:"#借与合并图解-t-3","aria-label":'Permalink to "借与合并图解 (t = 3)"'},"​")],-1)),s[38]||(s[38]=l("p",null,"借（兄弟有富余）：",-1)),s[39]||(s[39]=l("div",{class:"language- max-h-500px"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"父:      [   Kp   ]")]),n(`
`),l("span",{class:"line"},[l("span",null,"        /          \\")]),n(`
`),l("span",{class:"line"},[l("span",null,"左子: [a b]   右子: [ d e f g ]  (右子 >= t=3 键)")]),n(`
`),l("span",{class:"line"},[l("span",null,"-- 借一个：右子最左 d 上升为 Kp，Kp 下沉到左子")]),n(`
`),l("span",{class:"line"},[l("span",null,"父:      [   d   ]")]),n(`
`),l("span",{class:"line"},[l("span",null,"       /          \\")]),n(`
`),l("span",{class:"line"},[l("span",null,"左子: [a b Kp] 右子:[ e f g ]")])])]),l("button",{class:"code-block-unfold-btn"})],-1)),s[40]||(s[40]=l("p",null,"合并（兄弟都仅 t-1 键）：",-1)),s[41]||(s[41]=l("div",{class:"language- max-h-500px"},[l("button",{title:"Copy code",class:"copy"}),l("span",{class:"lang"}),l("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[l("code",{"v-pre":""},[l("span",{class:"line"},[l("span",null,"父:      [   Kp   x ...]")]),n(`
`),l("span",{class:"line"},[l("span",null,"        /     \\")]),n(`
`),l("span",{class:"line"},[l("span",null,"左:[a b] 右:[ c d ]  (皆2 = t-1)")]),n(`
`),l("span",{class:"line"},[l("span",null,"-- 合并:")]),n(`
`),l("span",{class:"line"},[l("span",null,"新节点: [ a b Kp c d ] (5 = 2t-1 满)")]),n(`
`),l("span",{class:"line"},[l("span",null,"父删除 Kp 并去掉右指针")])])]),l("button",{class:"code-block-unfold-btn"})],-1)),s[42]||(s[42]=l("h2",{id:"与二叉平衡树-avl-rbt-对比",tabindex:"-1"},[n("与二叉平衡树 (AVL / RBT) 对比 "),l("a",{class:"header-anchor",href:"#与二叉平衡树-avl-rbt-对比","aria-label":'Permalink to "与二叉平衡树 (AVL / RBT) 对比"'},"​")],-1)),s[43]||(s[43]=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"维度"),l("th",null,"B 树"),l("th",null,"红黑树"),l("th",null,"AVL")])]),l("tbody",null,[l("tr",null,[l("td",null,"分支因子"),l("td",null,"多路 (几十~上千)"),l("td",null,"2"),l("td",null,"2")]),l("tr",null,[l("td",null,"高度"),l("td",null,"极低 (2~4 常见)"),l("td",null,"O(log n) 较小"),l("td",null,"O(log n) 更严格")]),l("tr",null,[l("td",null,"适用存储"),l("td",null,"磁盘 / SSD / Page Cache"),l("td",null,"内存"),l("td",null,"内存")]),l("tr",null,[l("td",null,"旋转/结构调整"),l("td",null,"分裂 / 合并 / 借"),l("td",null,"单/双旋 + 变色"),l("td",null,"频繁旋转")]),l("tr",null,[l("td",null,"查找常数因子"),l("td",null,"少层 + 节点内顺序/二分"),l("td",null,"多层"),l("td",null,"多层")]),l("tr",null,[l("td",null,"插入/删除复杂度"),l("td",null,"O(log_t n)"),l("td",null,"O(log n)"),l("td",null,"O(log n)")]),l("tr",null,[l("td",null,"典型应用"),l("td",null,"DB 索引、文件系统"),l("td",null,"语言库 map/set"),l("td",null,"内存频繁查找")])])],-1)),s[44]||(s[44]=l("h2",{id:"设计动机与磁盘友好性",tabindex:"-1"},[n("设计动机与磁盘友好性 "),l("a",{class:"header-anchor",href:"#设计动机与磁盘友好性","aria-label":'Permalink to "设计动机与磁盘友好性"'},"​")],-1)),s[45]||(s[45]=l("ul",null,[l("li",null,"一个页 4KB，若每个 key+指针 16B，可放 ~256 key（t ≈ 128）。"),l("li",null,[n("高度估算：百万级数据 "),l("code",null,"n=1e6"),n("："),l("code",null,"h ≤ log_128((1e6+1)/2) ≈ 3.x"),n("，I/O 仅 3~4 次。")]),l("li",null,[n("利用"),l("strong",null,"局部性"),n("：一个节点内连续 keys 顺序存放，CPU 缓存与预取友好。")])],-1)),s[46]||(s[46]=l("h2",{id:"常见误区",tabindex:"-1"},[n("常见误区 "),l("a",{class:"header-anchor",href:"#常见误区","aria-label":'Permalink to "常见误区"'},"​")],-1)),s[47]||(s[47]=l("table",null,[l("thead",null,[l("tr",null,[l("th",null,"误区"),l("th",null,"更正")])]),l("tbody",null,[l("tr",null,[l("td",null,"B 树 = B-树 = B+ 树"),l("td",null,"B+ 树是 B 树的变体（所有数据只在叶子，链表串联叶子）。")]),l("tr",null,[l("td",null,"插入必须回溯分裂"),l("td",null,"标准实现自顶向下：先分裂满子节点再下降。")]),l("tr",null,[l("td",null,"删除一定很难实现"),l("td",null,"关键在“进入前保证 child >= t”。")]),l("tr",null,[l("td",null,"t 越大越好"),l("td",null,"过大导致节点内查找代价上升；需权衡页大小/CPU 缓存。")]),l("tr",null,[l("td",null,"B 树节点一定全满"),l("td",null,"只要求范围约束；满只是极端。")])])],-1))]),"main-header":t(()=>[e(a.$slots,"main-header")]),"main-header-after":t(()=>[e(a.$slots,"main-header-after")]),"main-nav":t(()=>[e(a.$slots,"main-nav")]),"main-content-before":t(()=>[e(a.$slots,"main-content-before")]),"main-content":t(()=>[e(a.$slots,"main-content")]),"main-content-after":t(()=>[e(a.$slots,"main-content-after")]),"main-nav-before":t(()=>[e(a.$slots,"main-nav-before")]),"main-nav-after":t(()=>[e(a.$slots,"main-nav-after")]),comment:t(()=>[e(a.$slots,"comment")]),footer:t(()=>[e(a.$slots,"footer")]),aside:t(()=>[e(a.$slots,"aside")]),"aside-custom":t(()=>[e(a.$slots,"aside-custom")]),default:t(()=>[e(a.$slots,"default")]),_:3},8,["frontmatter"])}}};export{G as default,$ as usePageData};
